# The auth and security manager configurations
security:
    # The encoders used to encode password on particular models/entities
    encoders:
        # Our user class and the algorithm we'll use to encode passwords
        # 'auto' means to let BiuradPHP choose the best possible password hasher (sodium or Bcrypt)
        # Supported Drivers: "auto", "plaintext", "pbkdf2", "bcrypt", "native", "sodium" and more
        Symfony\Component\Security\Core\User\User: plaintext

    # The providers used to fetch users. Providers are used to locate where users are stored,
    # then fetch a specific user base on request.
    providers:
        # This example is for demo purposes, perhaps you creating a commercial website,
        # to avoid setting up a database, this can serve as a demo user or for testing.
        # default password is "password", you can set a password of your choice.
        # To use this provider, uncomment the three lines below.
        in_memory:
            memory:
                admin: { password: ~, roles: [ROLE_USER, ROLE_ADMIN] }

    # The security settings for handling password on user's registration.
    passwords:
        # The options requested by the validations to run.
        options:
            # This value set for max_similarity represents the maximum percentage
            # of similarity at which the password will be accepted. In other words, any
            # calculated similarity equal to, or greater than max_similarity is rejected.
            max_similarity: 70
            # The minimum length that a password must be to be accepted.
            # Recommended minimum value by NIST = 8 characters.
            length: 8
            # The amount of time that a password reset-token is valid for, in seconds.
            reset_time: 3600

        # The PasswordValidator class runs the password through all of these
        # classes, each getting the opportunity to pass/fail the password.
        # You can add custom classes as long as they adhere to the
        # PasswordValidatorInterface.
        validators:
            - BiuradPHP\Security\Password\Providers\CompositionContext
            - BiuradPHP\Security\Password\Providers\NothingPersonalContext

    # The security guard that protect's urls used on framework, Hence reduce the use of
    # Middlewares acting as security guards.
    # From the most above section, factories handlers configs will be added to firewalls.
    firewalls:
        dev:
            pattern: '^/assets/(css|images|js)/'
            security: false

        main:
            # this firewall applies to all URLs
            pattern: ^/

            # Incase an AccessDeniedException is throw, which url should we be redirected to.
            access_denied_url: ~

            # Enter the reference id of the AccessDeniedHandlerInterface implemented handler for 
            # catching AccessDeniedException when thrown.
            access_denied_handler: ~

            # but the firewall does not require login on every page
            # denying access is done in access_control or in your controllers
            anonymous: 
                lazy: lazy

            # This allows the user to login by submitting a username and password
            form_login:
                # The route name that the login form submits to
                check_path: security.login
                # The name of the route where the login form lives
                # When the user tries to access a protected page, they are redirected here
                login_path: security.login
                # The page users are redirect to when there is no previous page stored in the
                # session (for example when the users access directly to the login page).
                default_target_path: './'
                # Whether to check csrf token included post request.
                csrf_status: false
                # Should remember me be used on user's entry.
                remember_me: true

            # This allows the user to login by submitting a "form_login" with remember me
            remember_me:
                secret: '%env.SALT%'

            logout:
                # The route name the user can go to in order to logout
                path: security.logout
                # The name of the route to redirect to after logging out
                target: './'
                # Whether to check csrf token in post request.
                csrf_status: false

    # Used to restrict access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # this is a catch-all for the admin area and additional security lives in the section
        - { path: '^/admin', roles: ROLE_ADMIN }

        - { path: '^/register', roles: IS_AUTHENTICATED_ANONYMOUSLY }

    # Acceptable User Permissions/Roles
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
